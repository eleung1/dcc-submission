{spawn, exec} = require "child_process"
nodewatch = require "nodewatch"
httpProxy = require "http-proxy"
express = require "express"
growl = require "growl"

# ANSI Terminal Colors
bold = "\x1b[0;1m"
green = "\x1b[0;32m"
reset = "\x1b[0m"
red = "\x1b[0;31m"

# Constants
SRC = "src/main/webapp"
TARGET = "target/main/webapp"
TEST_SRC = "src/test/coffee"
TEST_TARGET = "target/test/js"

try
  which = require("which").sync
catch err
  which = null

test_successful = no

task "develop", "Compiles source files, watches for changes and starts server", -> develop()
# Not fully implemented
#task "prod", "Compiles, minifies and joins source files", -> production()
#task "docs", "Generate documentaion", -> docs()
task "tests", "Run tests", -> build -> tests ->

### Use these for testing
task "clean", "Clean target files", -> clean -> 
  colourLog "Target files successfully cleaned.", green
task "build", "Compiles source files to target", -> build -> 
  colourLog "Source files compiled successfully.", green
task "watch", "Watches source files for changes for changes", -> build -> watch -> 
  timeLog "Watching source files...\n"
task "server", "Starts Web Server on port 3001", -> server()
###

launch = (cmd, options=[], callback) ->
  cmd = which(cmd) if which
  app = spawn cmd, options
  #app.stdout.pipe(process.stdout)
  err = []  
  app.stderr.on "data", (data) ->
    err.push data
    
  app.on "exit", (status) -> 
    if status is 0
      callback?() 
    else
      growl("#{err.join ''}", { title: 'Failed!'})
      process.stdout.write "#{red}Failed!#{reset}\n#{err.join ''}"
    

develop = (callback) ->
  build -> server -> watch -> tests true, -> callback?() 

prod = (callback) ->
  build -> minify -> server -> callback?() 

build = (callback) ->
  clean -> coffee -> copy -> callback?()
  
watch = (callback) ->
  nodewatch.add("src", true).onChange (file,prev,curr,action) ->
    [path, ext] = file.split(".")
    switch ext
      when "coffee"
        timeLog "#{bold}#{file}#{reset} was #{action}d - compiling to javascript..."
        coffee file, -> 
          colourLog "Success!", green
          timeLog "#{bold}#{file}#{reset} was #{action}d - re-running tests..."
          tests true, -> colourLog "Success!", green
      
      when "handlebars"
      #  timeLog "#{bold}#{file}#{reset} was #{action}d - compiling to javascript..."
      #  handlebars file, -> colourLog "Success!", green
        target = file.replace("#{SRC}", "#{TARGET}").replace "coffee", "js/app"
        timeLog "#{bold}#{file}#{reset} was #{action}d - copying to target..."
        launch "cp", [file, target], -> colourLog "Success!", green

      when "css", "html"
        target = file.replace "#{SRC}", "#{TARGET}"
        timeLog "#{bold}#{file}#{reset} was #{action}d - copying to target..."
        launch "cp", [file, target], -> colourLog "Success!", green
    
    
  callback?()

clean = (callback) ->
  options = ["-rf", "#{TARGET}"]
  launch "rm", options, callback

copy = (callback) ->
  exec "cp -r #{SRC}/* #{TARGET}", ->
    exec "mv #{TARGET}/vendor #{TARGET}/js/", ->
      exec "cp -r #{SRC}/coffee/views/templates #{TARGET}/js/app/views/", ->
        options = ["-rf", "#{TARGET}/coffee"]
        launch "rm", options, callback
    
coffee = (source, callback) ->
  if typeof source is 'function'
    callback = source
    source = "#{SRC}/coffee/"
    target = "#{TARGET}/js/app/"
  else
    target = source.replace("#{SRC}", "#{TARGET}").replace("coffee", "js/app") + "/../"
  
  options = ["-c", "-o", target, source]
  launch "coffee", options, callback

handlebars = (source, callback) ->
  if typeof source is 'function'
    callback = source
    source = "#{SRC}/coffee/views/templates"
    exec "mkdir -p #{TARGET}/js/app/views/templates"

    fs.readdir(source).forEach (file) ->
      hbs = "#{source}/#{file}"
      js = hbs.replace("#{SRC}", "#{TARGET}").replace("coffee", "js/app").replace("handlebars", "js")
      options = [hbs, "-f", js]
      launch "node_modules/.bin/handlebars", options

  else  
    target = source.replace("#{SRC}", "#{TARGET}").replace("coffee", "js/app").replace("handlebars", "js")
    options = [source, "-f", target]
  
    launch "node_modules/.bin/handlebars", options
  
  callback?()

  
server = (callback) ->
  server = express.createServer();
      
  server.configure ->
    server.use express.methodOverride()
    server.use express.bodyParser()
    server.use express.static "#{TARGET}"
    server.use express.errorHandler
      dumpExceptions: true 
      showStack: true
    server.use server.router

  server.get /^(?!\/?(assets|vendor|js|tests|docs))/, (request, response) ->
    response.sendfile "#{TARGET}/index.html"

  server.listen 3000
  
  # Setup proxy to redirect /ws/* request to the DCC REST server  
  options =
    router:
      "localhost/ws/": "localhost:5380/ws/"
      "localhost": "localhost:3000"

  httpProxy.createServer(options).listen 3001, ->
    timeLog "Development Server listening on http://localhost:3001...\n"

  callback?()

tests = (watch, callback) ->
  options = ["src/test/coffee/runner.coffee", "--compilers", "coffee:coffee-script"]
  if typeof watch is 'function'
    callback = watch
    options = options.concat ["--reporter", "spec"]
    app = spawn "node_modules/.bin/mocha", options, { customFds: [0, 1, 2] }
    callback()
  else
    launch "node_modules/.bin/mocha", options, callback
  
# When watching scripts, it"s useful to log changes with the timestamp.
timeLog = (message) -> process.stdout.write "#{bold}#{(new Date).toLocaleTimeString()}#{reset} - #{message}"
colourLog = (message, color=reset) -> console.log "#{color}#{message}#{reset}"